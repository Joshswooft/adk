// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/inference-gateway/adk/server"
	"github.com/inference-gateway/adk/server/config"
)

type FakeAgentBuilder struct {
	BuildStub        func() (*server.OpenAICompatibleAgentImpl, error)
	buildMutex       sync.RWMutex
	buildArgsForCall []struct {
	}
	buildReturns struct {
		result1 *server.OpenAICompatibleAgentImpl
		result2 error
	}
	buildReturnsOnCall map[int]struct {
		result1 *server.OpenAICompatibleAgentImpl
		result2 error
	}
	GetConfigStub        func() *config.AgentConfig
	getConfigMutex       sync.RWMutex
	getConfigArgsForCall []struct {
	}
	getConfigReturns struct {
		result1 *config.AgentConfig
	}
	getConfigReturnsOnCall map[int]struct {
		result1 *config.AgentConfig
	}
	WithAfterAgentCallbackStub        func(...server.AfterAgentCallback) server.AgentBuilder
	withAfterAgentCallbackMutex       sync.RWMutex
	withAfterAgentCallbackArgsForCall []struct {
		arg1 []server.AfterAgentCallback
	}
	withAfterAgentCallbackReturns struct {
		result1 server.AgentBuilder
	}
	withAfterAgentCallbackReturnsOnCall map[int]struct {
		result1 server.AgentBuilder
	}
	WithAfterModelCallbackStub        func(...server.AfterModelCallback) server.AgentBuilder
	withAfterModelCallbackMutex       sync.RWMutex
	withAfterModelCallbackArgsForCall []struct {
		arg1 []server.AfterModelCallback
	}
	withAfterModelCallbackReturns struct {
		result1 server.AgentBuilder
	}
	withAfterModelCallbackReturnsOnCall map[int]struct {
		result1 server.AgentBuilder
	}
	WithAfterToolCallbackStub        func(...server.AfterToolCallback) server.AgentBuilder
	withAfterToolCallbackMutex       sync.RWMutex
	withAfterToolCallbackArgsForCall []struct {
		arg1 []server.AfterToolCallback
	}
	withAfterToolCallbackReturns struct {
		result1 server.AgentBuilder
	}
	withAfterToolCallbackReturnsOnCall map[int]struct {
		result1 server.AgentBuilder
	}
	WithBeforeAgentCallbackStub        func(...server.BeforeAgentCallback) server.AgentBuilder
	withBeforeAgentCallbackMutex       sync.RWMutex
	withBeforeAgentCallbackArgsForCall []struct {
		arg1 []server.BeforeAgentCallback
	}
	withBeforeAgentCallbackReturns struct {
		result1 server.AgentBuilder
	}
	withBeforeAgentCallbackReturnsOnCall map[int]struct {
		result1 server.AgentBuilder
	}
	WithBeforeModelCallbackStub        func(...server.BeforeModelCallback) server.AgentBuilder
	withBeforeModelCallbackMutex       sync.RWMutex
	withBeforeModelCallbackArgsForCall []struct {
		arg1 []server.BeforeModelCallback
	}
	withBeforeModelCallbackReturns struct {
		result1 server.AgentBuilder
	}
	withBeforeModelCallbackReturnsOnCall map[int]struct {
		result1 server.AgentBuilder
	}
	WithBeforeToolCallbackStub        func(...server.BeforeToolCallback) server.AgentBuilder
	withBeforeToolCallbackMutex       sync.RWMutex
	withBeforeToolCallbackArgsForCall []struct {
		arg1 []server.BeforeToolCallback
	}
	withBeforeToolCallbackReturns struct {
		result1 server.AgentBuilder
	}
	withBeforeToolCallbackReturnsOnCall map[int]struct {
		result1 server.AgentBuilder
	}
	WithCallbacksStub        func(*server.CallbackConfig) server.AgentBuilder
	withCallbacksMutex       sync.RWMutex
	withCallbacksArgsForCall []struct {
		arg1 *server.CallbackConfig
	}
	withCallbacksReturns struct {
		result1 server.AgentBuilder
	}
	withCallbacksReturnsOnCall map[int]struct {
		result1 server.AgentBuilder
	}
	WithConfigStub        func(*config.AgentConfig) server.AgentBuilder
	withConfigMutex       sync.RWMutex
	withConfigArgsForCall []struct {
		arg1 *config.AgentConfig
	}
	withConfigReturns struct {
		result1 server.AgentBuilder
	}
	withConfigReturnsOnCall map[int]struct {
		result1 server.AgentBuilder
	}
	WithLLMClientStub        func(server.LLMClient) server.AgentBuilder
	withLLMClientMutex       sync.RWMutex
	withLLMClientArgsForCall []struct {
		arg1 server.LLMClient
	}
	withLLMClientReturns struct {
		result1 server.AgentBuilder
	}
	withLLMClientReturnsOnCall map[int]struct {
		result1 server.AgentBuilder
	}
	WithMaxChatCompletionStub        func(int) server.AgentBuilder
	withMaxChatCompletionMutex       sync.RWMutex
	withMaxChatCompletionArgsForCall []struct {
		arg1 int
	}
	withMaxChatCompletionReturns struct {
		result1 server.AgentBuilder
	}
	withMaxChatCompletionReturnsOnCall map[int]struct {
		result1 server.AgentBuilder
	}
	WithMaxConversationHistoryStub        func(int) server.AgentBuilder
	withMaxConversationHistoryMutex       sync.RWMutex
	withMaxConversationHistoryArgsForCall []struct {
		arg1 int
	}
	withMaxConversationHistoryReturns struct {
		result1 server.AgentBuilder
	}
	withMaxConversationHistoryReturnsOnCall map[int]struct {
		result1 server.AgentBuilder
	}
	WithSystemPromptStub        func(string) server.AgentBuilder
	withSystemPromptMutex       sync.RWMutex
	withSystemPromptArgsForCall []struct {
		arg1 string
	}
	withSystemPromptReturns struct {
		result1 server.AgentBuilder
	}
	withSystemPromptReturnsOnCall map[int]struct {
		result1 server.AgentBuilder
	}
	WithToolBoxStub        func(server.ToolBox) server.AgentBuilder
	withToolBoxMutex       sync.RWMutex
	withToolBoxArgsForCall []struct {
		arg1 server.ToolBox
	}
	withToolBoxReturns struct {
		result1 server.AgentBuilder
	}
	withToolBoxReturnsOnCall map[int]struct {
		result1 server.AgentBuilder
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAgentBuilder) Build() (*server.OpenAICompatibleAgentImpl, error) {
	fake.buildMutex.Lock()
	ret, specificReturn := fake.buildReturnsOnCall[len(fake.buildArgsForCall)]
	fake.buildArgsForCall = append(fake.buildArgsForCall, struct {
	}{})
	stub := fake.BuildStub
	fakeReturns := fake.buildReturns
	fake.recordInvocation("Build", []interface{}{})
	fake.buildMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAgentBuilder) BuildCallCount() int {
	fake.buildMutex.RLock()
	defer fake.buildMutex.RUnlock()
	return len(fake.buildArgsForCall)
}

func (fake *FakeAgentBuilder) BuildCalls(stub func() (*server.OpenAICompatibleAgentImpl, error)) {
	fake.buildMutex.Lock()
	defer fake.buildMutex.Unlock()
	fake.BuildStub = stub
}

func (fake *FakeAgentBuilder) BuildReturns(result1 *server.OpenAICompatibleAgentImpl, result2 error) {
	fake.buildMutex.Lock()
	defer fake.buildMutex.Unlock()
	fake.BuildStub = nil
	fake.buildReturns = struct {
		result1 *server.OpenAICompatibleAgentImpl
		result2 error
	}{result1, result2}
}

func (fake *FakeAgentBuilder) BuildReturnsOnCall(i int, result1 *server.OpenAICompatibleAgentImpl, result2 error) {
	fake.buildMutex.Lock()
	defer fake.buildMutex.Unlock()
	fake.BuildStub = nil
	if fake.buildReturnsOnCall == nil {
		fake.buildReturnsOnCall = make(map[int]struct {
			result1 *server.OpenAICompatibleAgentImpl
			result2 error
		})
	}
	fake.buildReturnsOnCall[i] = struct {
		result1 *server.OpenAICompatibleAgentImpl
		result2 error
	}{result1, result2}
}

func (fake *FakeAgentBuilder) GetConfig() *config.AgentConfig {
	fake.getConfigMutex.Lock()
	ret, specificReturn := fake.getConfigReturnsOnCall[len(fake.getConfigArgsForCall)]
	fake.getConfigArgsForCall = append(fake.getConfigArgsForCall, struct {
	}{})
	stub := fake.GetConfigStub
	fakeReturns := fake.getConfigReturns
	fake.recordInvocation("GetConfig", []interface{}{})
	fake.getConfigMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeAgentBuilder) GetConfigCallCount() int {
	fake.getConfigMutex.RLock()
	defer fake.getConfigMutex.RUnlock()
	return len(fake.getConfigArgsForCall)
}

func (fake *FakeAgentBuilder) GetConfigCalls(stub func() *config.AgentConfig) {
	fake.getConfigMutex.Lock()
	defer fake.getConfigMutex.Unlock()
	fake.GetConfigStub = stub
}

func (fake *FakeAgentBuilder) GetConfigReturns(result1 *config.AgentConfig) {
	fake.getConfigMutex.Lock()
	defer fake.getConfigMutex.Unlock()
	fake.GetConfigStub = nil
	fake.getConfigReturns = struct {
		result1 *config.AgentConfig
	}{result1}
}

func (fake *FakeAgentBuilder) GetConfigReturnsOnCall(i int, result1 *config.AgentConfig) {
	fake.getConfigMutex.Lock()
	defer fake.getConfigMutex.Unlock()
	fake.GetConfigStub = nil
	if fake.getConfigReturnsOnCall == nil {
		fake.getConfigReturnsOnCall = make(map[int]struct {
			result1 *config.AgentConfig
		})
	}
	fake.getConfigReturnsOnCall[i] = struct {
		result1 *config.AgentConfig
	}{result1}
}

func (fake *FakeAgentBuilder) WithAfterAgentCallback(arg1 ...server.AfterAgentCallback) server.AgentBuilder {
	fake.withAfterAgentCallbackMutex.Lock()
	ret, specificReturn := fake.withAfterAgentCallbackReturnsOnCall[len(fake.withAfterAgentCallbackArgsForCall)]
	fake.withAfterAgentCallbackArgsForCall = append(fake.withAfterAgentCallbackArgsForCall, struct {
		arg1 []server.AfterAgentCallback
	}{arg1})
	stub := fake.WithAfterAgentCallbackStub
	fakeReturns := fake.withAfterAgentCallbackReturns
	fake.recordInvocation("WithAfterAgentCallback", []interface{}{arg1})
	fake.withAfterAgentCallbackMutex.Unlock()
	if stub != nil {
		return stub(arg1...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeAgentBuilder) WithAfterAgentCallbackCallCount() int {
	fake.withAfterAgentCallbackMutex.RLock()
	defer fake.withAfterAgentCallbackMutex.RUnlock()
	return len(fake.withAfterAgentCallbackArgsForCall)
}

func (fake *FakeAgentBuilder) WithAfterAgentCallbackCalls(stub func(...server.AfterAgentCallback) server.AgentBuilder) {
	fake.withAfterAgentCallbackMutex.Lock()
	defer fake.withAfterAgentCallbackMutex.Unlock()
	fake.WithAfterAgentCallbackStub = stub
}

func (fake *FakeAgentBuilder) WithAfterAgentCallbackArgsForCall(i int) []server.AfterAgentCallback {
	fake.withAfterAgentCallbackMutex.RLock()
	defer fake.withAfterAgentCallbackMutex.RUnlock()
	argsForCall := fake.withAfterAgentCallbackArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeAgentBuilder) WithAfterAgentCallbackReturns(result1 server.AgentBuilder) {
	fake.withAfterAgentCallbackMutex.Lock()
	defer fake.withAfterAgentCallbackMutex.Unlock()
	fake.WithAfterAgentCallbackStub = nil
	fake.withAfterAgentCallbackReturns = struct {
		result1 server.AgentBuilder
	}{result1}
}

func (fake *FakeAgentBuilder) WithAfterAgentCallbackReturnsOnCall(i int, result1 server.AgentBuilder) {
	fake.withAfterAgentCallbackMutex.Lock()
	defer fake.withAfterAgentCallbackMutex.Unlock()
	fake.WithAfterAgentCallbackStub = nil
	if fake.withAfterAgentCallbackReturnsOnCall == nil {
		fake.withAfterAgentCallbackReturnsOnCall = make(map[int]struct {
			result1 server.AgentBuilder
		})
	}
	fake.withAfterAgentCallbackReturnsOnCall[i] = struct {
		result1 server.AgentBuilder
	}{result1}
}

func (fake *FakeAgentBuilder) WithAfterModelCallback(arg1 ...server.AfterModelCallback) server.AgentBuilder {
	fake.withAfterModelCallbackMutex.Lock()
	ret, specificReturn := fake.withAfterModelCallbackReturnsOnCall[len(fake.withAfterModelCallbackArgsForCall)]
	fake.withAfterModelCallbackArgsForCall = append(fake.withAfterModelCallbackArgsForCall, struct {
		arg1 []server.AfterModelCallback
	}{arg1})
	stub := fake.WithAfterModelCallbackStub
	fakeReturns := fake.withAfterModelCallbackReturns
	fake.recordInvocation("WithAfterModelCallback", []interface{}{arg1})
	fake.withAfterModelCallbackMutex.Unlock()
	if stub != nil {
		return stub(arg1...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeAgentBuilder) WithAfterModelCallbackCallCount() int {
	fake.withAfterModelCallbackMutex.RLock()
	defer fake.withAfterModelCallbackMutex.RUnlock()
	return len(fake.withAfterModelCallbackArgsForCall)
}

func (fake *FakeAgentBuilder) WithAfterModelCallbackCalls(stub func(...server.AfterModelCallback) server.AgentBuilder) {
	fake.withAfterModelCallbackMutex.Lock()
	defer fake.withAfterModelCallbackMutex.Unlock()
	fake.WithAfterModelCallbackStub = stub
}

func (fake *FakeAgentBuilder) WithAfterModelCallbackArgsForCall(i int) []server.AfterModelCallback {
	fake.withAfterModelCallbackMutex.RLock()
	defer fake.withAfterModelCallbackMutex.RUnlock()
	argsForCall := fake.withAfterModelCallbackArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeAgentBuilder) WithAfterModelCallbackReturns(result1 server.AgentBuilder) {
	fake.withAfterModelCallbackMutex.Lock()
	defer fake.withAfterModelCallbackMutex.Unlock()
	fake.WithAfterModelCallbackStub = nil
	fake.withAfterModelCallbackReturns = struct {
		result1 server.AgentBuilder
	}{result1}
}

func (fake *FakeAgentBuilder) WithAfterModelCallbackReturnsOnCall(i int, result1 server.AgentBuilder) {
	fake.withAfterModelCallbackMutex.Lock()
	defer fake.withAfterModelCallbackMutex.Unlock()
	fake.WithAfterModelCallbackStub = nil
	if fake.withAfterModelCallbackReturnsOnCall == nil {
		fake.withAfterModelCallbackReturnsOnCall = make(map[int]struct {
			result1 server.AgentBuilder
		})
	}
	fake.withAfterModelCallbackReturnsOnCall[i] = struct {
		result1 server.AgentBuilder
	}{result1}
}

func (fake *FakeAgentBuilder) WithAfterToolCallback(arg1 ...server.AfterToolCallback) server.AgentBuilder {
	fake.withAfterToolCallbackMutex.Lock()
	ret, specificReturn := fake.withAfterToolCallbackReturnsOnCall[len(fake.withAfterToolCallbackArgsForCall)]
	fake.withAfterToolCallbackArgsForCall = append(fake.withAfterToolCallbackArgsForCall, struct {
		arg1 []server.AfterToolCallback
	}{arg1})
	stub := fake.WithAfterToolCallbackStub
	fakeReturns := fake.withAfterToolCallbackReturns
	fake.recordInvocation("WithAfterToolCallback", []interface{}{arg1})
	fake.withAfterToolCallbackMutex.Unlock()
	if stub != nil {
		return stub(arg1...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeAgentBuilder) WithAfterToolCallbackCallCount() int {
	fake.withAfterToolCallbackMutex.RLock()
	defer fake.withAfterToolCallbackMutex.RUnlock()
	return len(fake.withAfterToolCallbackArgsForCall)
}

func (fake *FakeAgentBuilder) WithAfterToolCallbackCalls(stub func(...server.AfterToolCallback) server.AgentBuilder) {
	fake.withAfterToolCallbackMutex.Lock()
	defer fake.withAfterToolCallbackMutex.Unlock()
	fake.WithAfterToolCallbackStub = stub
}

func (fake *FakeAgentBuilder) WithAfterToolCallbackArgsForCall(i int) []server.AfterToolCallback {
	fake.withAfterToolCallbackMutex.RLock()
	defer fake.withAfterToolCallbackMutex.RUnlock()
	argsForCall := fake.withAfterToolCallbackArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeAgentBuilder) WithAfterToolCallbackReturns(result1 server.AgentBuilder) {
	fake.withAfterToolCallbackMutex.Lock()
	defer fake.withAfterToolCallbackMutex.Unlock()
	fake.WithAfterToolCallbackStub = nil
	fake.withAfterToolCallbackReturns = struct {
		result1 server.AgentBuilder
	}{result1}
}

func (fake *FakeAgentBuilder) WithAfterToolCallbackReturnsOnCall(i int, result1 server.AgentBuilder) {
	fake.withAfterToolCallbackMutex.Lock()
	defer fake.withAfterToolCallbackMutex.Unlock()
	fake.WithAfterToolCallbackStub = nil
	if fake.withAfterToolCallbackReturnsOnCall == nil {
		fake.withAfterToolCallbackReturnsOnCall = make(map[int]struct {
			result1 server.AgentBuilder
		})
	}
	fake.withAfterToolCallbackReturnsOnCall[i] = struct {
		result1 server.AgentBuilder
	}{result1}
}

func (fake *FakeAgentBuilder) WithBeforeAgentCallback(arg1 ...server.BeforeAgentCallback) server.AgentBuilder {
	fake.withBeforeAgentCallbackMutex.Lock()
	ret, specificReturn := fake.withBeforeAgentCallbackReturnsOnCall[len(fake.withBeforeAgentCallbackArgsForCall)]
	fake.withBeforeAgentCallbackArgsForCall = append(fake.withBeforeAgentCallbackArgsForCall, struct {
		arg1 []server.BeforeAgentCallback
	}{arg1})
	stub := fake.WithBeforeAgentCallbackStub
	fakeReturns := fake.withBeforeAgentCallbackReturns
	fake.recordInvocation("WithBeforeAgentCallback", []interface{}{arg1})
	fake.withBeforeAgentCallbackMutex.Unlock()
	if stub != nil {
		return stub(arg1...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeAgentBuilder) WithBeforeAgentCallbackCallCount() int {
	fake.withBeforeAgentCallbackMutex.RLock()
	defer fake.withBeforeAgentCallbackMutex.RUnlock()
	return len(fake.withBeforeAgentCallbackArgsForCall)
}

func (fake *FakeAgentBuilder) WithBeforeAgentCallbackCalls(stub func(...server.BeforeAgentCallback) server.AgentBuilder) {
	fake.withBeforeAgentCallbackMutex.Lock()
	defer fake.withBeforeAgentCallbackMutex.Unlock()
	fake.WithBeforeAgentCallbackStub = stub
}

func (fake *FakeAgentBuilder) WithBeforeAgentCallbackArgsForCall(i int) []server.BeforeAgentCallback {
	fake.withBeforeAgentCallbackMutex.RLock()
	defer fake.withBeforeAgentCallbackMutex.RUnlock()
	argsForCall := fake.withBeforeAgentCallbackArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeAgentBuilder) WithBeforeAgentCallbackReturns(result1 server.AgentBuilder) {
	fake.withBeforeAgentCallbackMutex.Lock()
	defer fake.withBeforeAgentCallbackMutex.Unlock()
	fake.WithBeforeAgentCallbackStub = nil
	fake.withBeforeAgentCallbackReturns = struct {
		result1 server.AgentBuilder
	}{result1}
}

func (fake *FakeAgentBuilder) WithBeforeAgentCallbackReturnsOnCall(i int, result1 server.AgentBuilder) {
	fake.withBeforeAgentCallbackMutex.Lock()
	defer fake.withBeforeAgentCallbackMutex.Unlock()
	fake.WithBeforeAgentCallbackStub = nil
	if fake.withBeforeAgentCallbackReturnsOnCall == nil {
		fake.withBeforeAgentCallbackReturnsOnCall = make(map[int]struct {
			result1 server.AgentBuilder
		})
	}
	fake.withBeforeAgentCallbackReturnsOnCall[i] = struct {
		result1 server.AgentBuilder
	}{result1}
}

func (fake *FakeAgentBuilder) WithBeforeModelCallback(arg1 ...server.BeforeModelCallback) server.AgentBuilder {
	fake.withBeforeModelCallbackMutex.Lock()
	ret, specificReturn := fake.withBeforeModelCallbackReturnsOnCall[len(fake.withBeforeModelCallbackArgsForCall)]
	fake.withBeforeModelCallbackArgsForCall = append(fake.withBeforeModelCallbackArgsForCall, struct {
		arg1 []server.BeforeModelCallback
	}{arg1})
	stub := fake.WithBeforeModelCallbackStub
	fakeReturns := fake.withBeforeModelCallbackReturns
	fake.recordInvocation("WithBeforeModelCallback", []interface{}{arg1})
	fake.withBeforeModelCallbackMutex.Unlock()
	if stub != nil {
		return stub(arg1...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeAgentBuilder) WithBeforeModelCallbackCallCount() int {
	fake.withBeforeModelCallbackMutex.RLock()
	defer fake.withBeforeModelCallbackMutex.RUnlock()
	return len(fake.withBeforeModelCallbackArgsForCall)
}

func (fake *FakeAgentBuilder) WithBeforeModelCallbackCalls(stub func(...server.BeforeModelCallback) server.AgentBuilder) {
	fake.withBeforeModelCallbackMutex.Lock()
	defer fake.withBeforeModelCallbackMutex.Unlock()
	fake.WithBeforeModelCallbackStub = stub
}

func (fake *FakeAgentBuilder) WithBeforeModelCallbackArgsForCall(i int) []server.BeforeModelCallback {
	fake.withBeforeModelCallbackMutex.RLock()
	defer fake.withBeforeModelCallbackMutex.RUnlock()
	argsForCall := fake.withBeforeModelCallbackArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeAgentBuilder) WithBeforeModelCallbackReturns(result1 server.AgentBuilder) {
	fake.withBeforeModelCallbackMutex.Lock()
	defer fake.withBeforeModelCallbackMutex.Unlock()
	fake.WithBeforeModelCallbackStub = nil
	fake.withBeforeModelCallbackReturns = struct {
		result1 server.AgentBuilder
	}{result1}
}

func (fake *FakeAgentBuilder) WithBeforeModelCallbackReturnsOnCall(i int, result1 server.AgentBuilder) {
	fake.withBeforeModelCallbackMutex.Lock()
	defer fake.withBeforeModelCallbackMutex.Unlock()
	fake.WithBeforeModelCallbackStub = nil
	if fake.withBeforeModelCallbackReturnsOnCall == nil {
		fake.withBeforeModelCallbackReturnsOnCall = make(map[int]struct {
			result1 server.AgentBuilder
		})
	}
	fake.withBeforeModelCallbackReturnsOnCall[i] = struct {
		result1 server.AgentBuilder
	}{result1}
}

func (fake *FakeAgentBuilder) WithBeforeToolCallback(arg1 ...server.BeforeToolCallback) server.AgentBuilder {
	fake.withBeforeToolCallbackMutex.Lock()
	ret, specificReturn := fake.withBeforeToolCallbackReturnsOnCall[len(fake.withBeforeToolCallbackArgsForCall)]
	fake.withBeforeToolCallbackArgsForCall = append(fake.withBeforeToolCallbackArgsForCall, struct {
		arg1 []server.BeforeToolCallback
	}{arg1})
	stub := fake.WithBeforeToolCallbackStub
	fakeReturns := fake.withBeforeToolCallbackReturns
	fake.recordInvocation("WithBeforeToolCallback", []interface{}{arg1})
	fake.withBeforeToolCallbackMutex.Unlock()
	if stub != nil {
		return stub(arg1...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeAgentBuilder) WithBeforeToolCallbackCallCount() int {
	fake.withBeforeToolCallbackMutex.RLock()
	defer fake.withBeforeToolCallbackMutex.RUnlock()
	return len(fake.withBeforeToolCallbackArgsForCall)
}

func (fake *FakeAgentBuilder) WithBeforeToolCallbackCalls(stub func(...server.BeforeToolCallback) server.AgentBuilder) {
	fake.withBeforeToolCallbackMutex.Lock()
	defer fake.withBeforeToolCallbackMutex.Unlock()
	fake.WithBeforeToolCallbackStub = stub
}

func (fake *FakeAgentBuilder) WithBeforeToolCallbackArgsForCall(i int) []server.BeforeToolCallback {
	fake.withBeforeToolCallbackMutex.RLock()
	defer fake.withBeforeToolCallbackMutex.RUnlock()
	argsForCall := fake.withBeforeToolCallbackArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeAgentBuilder) WithBeforeToolCallbackReturns(result1 server.AgentBuilder) {
	fake.withBeforeToolCallbackMutex.Lock()
	defer fake.withBeforeToolCallbackMutex.Unlock()
	fake.WithBeforeToolCallbackStub = nil
	fake.withBeforeToolCallbackReturns = struct {
		result1 server.AgentBuilder
	}{result1}
}

func (fake *FakeAgentBuilder) WithBeforeToolCallbackReturnsOnCall(i int, result1 server.AgentBuilder) {
	fake.withBeforeToolCallbackMutex.Lock()
	defer fake.withBeforeToolCallbackMutex.Unlock()
	fake.WithBeforeToolCallbackStub = nil
	if fake.withBeforeToolCallbackReturnsOnCall == nil {
		fake.withBeforeToolCallbackReturnsOnCall = make(map[int]struct {
			result1 server.AgentBuilder
		})
	}
	fake.withBeforeToolCallbackReturnsOnCall[i] = struct {
		result1 server.AgentBuilder
	}{result1}
}

func (fake *FakeAgentBuilder) WithCallbacks(arg1 *server.CallbackConfig) server.AgentBuilder {
	fake.withCallbacksMutex.Lock()
	ret, specificReturn := fake.withCallbacksReturnsOnCall[len(fake.withCallbacksArgsForCall)]
	fake.withCallbacksArgsForCall = append(fake.withCallbacksArgsForCall, struct {
		arg1 *server.CallbackConfig
	}{arg1})
	stub := fake.WithCallbacksStub
	fakeReturns := fake.withCallbacksReturns
	fake.recordInvocation("WithCallbacks", []interface{}{arg1})
	fake.withCallbacksMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeAgentBuilder) WithCallbacksCallCount() int {
	fake.withCallbacksMutex.RLock()
	defer fake.withCallbacksMutex.RUnlock()
	return len(fake.withCallbacksArgsForCall)
}

func (fake *FakeAgentBuilder) WithCallbacksCalls(stub func(*server.CallbackConfig) server.AgentBuilder) {
	fake.withCallbacksMutex.Lock()
	defer fake.withCallbacksMutex.Unlock()
	fake.WithCallbacksStub = stub
}

func (fake *FakeAgentBuilder) WithCallbacksArgsForCall(i int) *server.CallbackConfig {
	fake.withCallbacksMutex.RLock()
	defer fake.withCallbacksMutex.RUnlock()
	argsForCall := fake.withCallbacksArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeAgentBuilder) WithCallbacksReturns(result1 server.AgentBuilder) {
	fake.withCallbacksMutex.Lock()
	defer fake.withCallbacksMutex.Unlock()
	fake.WithCallbacksStub = nil
	fake.withCallbacksReturns = struct {
		result1 server.AgentBuilder
	}{result1}
}

func (fake *FakeAgentBuilder) WithCallbacksReturnsOnCall(i int, result1 server.AgentBuilder) {
	fake.withCallbacksMutex.Lock()
	defer fake.withCallbacksMutex.Unlock()
	fake.WithCallbacksStub = nil
	if fake.withCallbacksReturnsOnCall == nil {
		fake.withCallbacksReturnsOnCall = make(map[int]struct {
			result1 server.AgentBuilder
		})
	}
	fake.withCallbacksReturnsOnCall[i] = struct {
		result1 server.AgentBuilder
	}{result1}
}

func (fake *FakeAgentBuilder) WithConfig(arg1 *config.AgentConfig) server.AgentBuilder {
	fake.withConfigMutex.Lock()
	ret, specificReturn := fake.withConfigReturnsOnCall[len(fake.withConfigArgsForCall)]
	fake.withConfigArgsForCall = append(fake.withConfigArgsForCall, struct {
		arg1 *config.AgentConfig
	}{arg1})
	stub := fake.WithConfigStub
	fakeReturns := fake.withConfigReturns
	fake.recordInvocation("WithConfig", []interface{}{arg1})
	fake.withConfigMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeAgentBuilder) WithConfigCallCount() int {
	fake.withConfigMutex.RLock()
	defer fake.withConfigMutex.RUnlock()
	return len(fake.withConfigArgsForCall)
}

func (fake *FakeAgentBuilder) WithConfigCalls(stub func(*config.AgentConfig) server.AgentBuilder) {
	fake.withConfigMutex.Lock()
	defer fake.withConfigMutex.Unlock()
	fake.WithConfigStub = stub
}

func (fake *FakeAgentBuilder) WithConfigArgsForCall(i int) *config.AgentConfig {
	fake.withConfigMutex.RLock()
	defer fake.withConfigMutex.RUnlock()
	argsForCall := fake.withConfigArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeAgentBuilder) WithConfigReturns(result1 server.AgentBuilder) {
	fake.withConfigMutex.Lock()
	defer fake.withConfigMutex.Unlock()
	fake.WithConfigStub = nil
	fake.withConfigReturns = struct {
		result1 server.AgentBuilder
	}{result1}
}

func (fake *FakeAgentBuilder) WithConfigReturnsOnCall(i int, result1 server.AgentBuilder) {
	fake.withConfigMutex.Lock()
	defer fake.withConfigMutex.Unlock()
	fake.WithConfigStub = nil
	if fake.withConfigReturnsOnCall == nil {
		fake.withConfigReturnsOnCall = make(map[int]struct {
			result1 server.AgentBuilder
		})
	}
	fake.withConfigReturnsOnCall[i] = struct {
		result1 server.AgentBuilder
	}{result1}
}

func (fake *FakeAgentBuilder) WithLLMClient(arg1 server.LLMClient) server.AgentBuilder {
	fake.withLLMClientMutex.Lock()
	ret, specificReturn := fake.withLLMClientReturnsOnCall[len(fake.withLLMClientArgsForCall)]
	fake.withLLMClientArgsForCall = append(fake.withLLMClientArgsForCall, struct {
		arg1 server.LLMClient
	}{arg1})
	stub := fake.WithLLMClientStub
	fakeReturns := fake.withLLMClientReturns
	fake.recordInvocation("WithLLMClient", []interface{}{arg1})
	fake.withLLMClientMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeAgentBuilder) WithLLMClientCallCount() int {
	fake.withLLMClientMutex.RLock()
	defer fake.withLLMClientMutex.RUnlock()
	return len(fake.withLLMClientArgsForCall)
}

func (fake *FakeAgentBuilder) WithLLMClientCalls(stub func(server.LLMClient) server.AgentBuilder) {
	fake.withLLMClientMutex.Lock()
	defer fake.withLLMClientMutex.Unlock()
	fake.WithLLMClientStub = stub
}

func (fake *FakeAgentBuilder) WithLLMClientArgsForCall(i int) server.LLMClient {
	fake.withLLMClientMutex.RLock()
	defer fake.withLLMClientMutex.RUnlock()
	argsForCall := fake.withLLMClientArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeAgentBuilder) WithLLMClientReturns(result1 server.AgentBuilder) {
	fake.withLLMClientMutex.Lock()
	defer fake.withLLMClientMutex.Unlock()
	fake.WithLLMClientStub = nil
	fake.withLLMClientReturns = struct {
		result1 server.AgentBuilder
	}{result1}
}

func (fake *FakeAgentBuilder) WithLLMClientReturnsOnCall(i int, result1 server.AgentBuilder) {
	fake.withLLMClientMutex.Lock()
	defer fake.withLLMClientMutex.Unlock()
	fake.WithLLMClientStub = nil
	if fake.withLLMClientReturnsOnCall == nil {
		fake.withLLMClientReturnsOnCall = make(map[int]struct {
			result1 server.AgentBuilder
		})
	}
	fake.withLLMClientReturnsOnCall[i] = struct {
		result1 server.AgentBuilder
	}{result1}
}

func (fake *FakeAgentBuilder) WithMaxChatCompletion(arg1 int) server.AgentBuilder {
	fake.withMaxChatCompletionMutex.Lock()
	ret, specificReturn := fake.withMaxChatCompletionReturnsOnCall[len(fake.withMaxChatCompletionArgsForCall)]
	fake.withMaxChatCompletionArgsForCall = append(fake.withMaxChatCompletionArgsForCall, struct {
		arg1 int
	}{arg1})
	stub := fake.WithMaxChatCompletionStub
	fakeReturns := fake.withMaxChatCompletionReturns
	fake.recordInvocation("WithMaxChatCompletion", []interface{}{arg1})
	fake.withMaxChatCompletionMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeAgentBuilder) WithMaxChatCompletionCallCount() int {
	fake.withMaxChatCompletionMutex.RLock()
	defer fake.withMaxChatCompletionMutex.RUnlock()
	return len(fake.withMaxChatCompletionArgsForCall)
}

func (fake *FakeAgentBuilder) WithMaxChatCompletionCalls(stub func(int) server.AgentBuilder) {
	fake.withMaxChatCompletionMutex.Lock()
	defer fake.withMaxChatCompletionMutex.Unlock()
	fake.WithMaxChatCompletionStub = stub
}

func (fake *FakeAgentBuilder) WithMaxChatCompletionArgsForCall(i int) int {
	fake.withMaxChatCompletionMutex.RLock()
	defer fake.withMaxChatCompletionMutex.RUnlock()
	argsForCall := fake.withMaxChatCompletionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeAgentBuilder) WithMaxChatCompletionReturns(result1 server.AgentBuilder) {
	fake.withMaxChatCompletionMutex.Lock()
	defer fake.withMaxChatCompletionMutex.Unlock()
	fake.WithMaxChatCompletionStub = nil
	fake.withMaxChatCompletionReturns = struct {
		result1 server.AgentBuilder
	}{result1}
}

func (fake *FakeAgentBuilder) WithMaxChatCompletionReturnsOnCall(i int, result1 server.AgentBuilder) {
	fake.withMaxChatCompletionMutex.Lock()
	defer fake.withMaxChatCompletionMutex.Unlock()
	fake.WithMaxChatCompletionStub = nil
	if fake.withMaxChatCompletionReturnsOnCall == nil {
		fake.withMaxChatCompletionReturnsOnCall = make(map[int]struct {
			result1 server.AgentBuilder
		})
	}
	fake.withMaxChatCompletionReturnsOnCall[i] = struct {
		result1 server.AgentBuilder
	}{result1}
}

func (fake *FakeAgentBuilder) WithMaxConversationHistory(arg1 int) server.AgentBuilder {
	fake.withMaxConversationHistoryMutex.Lock()
	ret, specificReturn := fake.withMaxConversationHistoryReturnsOnCall[len(fake.withMaxConversationHistoryArgsForCall)]
	fake.withMaxConversationHistoryArgsForCall = append(fake.withMaxConversationHistoryArgsForCall, struct {
		arg1 int
	}{arg1})
	stub := fake.WithMaxConversationHistoryStub
	fakeReturns := fake.withMaxConversationHistoryReturns
	fake.recordInvocation("WithMaxConversationHistory", []interface{}{arg1})
	fake.withMaxConversationHistoryMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeAgentBuilder) WithMaxConversationHistoryCallCount() int {
	fake.withMaxConversationHistoryMutex.RLock()
	defer fake.withMaxConversationHistoryMutex.RUnlock()
	return len(fake.withMaxConversationHistoryArgsForCall)
}

func (fake *FakeAgentBuilder) WithMaxConversationHistoryCalls(stub func(int) server.AgentBuilder) {
	fake.withMaxConversationHistoryMutex.Lock()
	defer fake.withMaxConversationHistoryMutex.Unlock()
	fake.WithMaxConversationHistoryStub = stub
}

func (fake *FakeAgentBuilder) WithMaxConversationHistoryArgsForCall(i int) int {
	fake.withMaxConversationHistoryMutex.RLock()
	defer fake.withMaxConversationHistoryMutex.RUnlock()
	argsForCall := fake.withMaxConversationHistoryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeAgentBuilder) WithMaxConversationHistoryReturns(result1 server.AgentBuilder) {
	fake.withMaxConversationHistoryMutex.Lock()
	defer fake.withMaxConversationHistoryMutex.Unlock()
	fake.WithMaxConversationHistoryStub = nil
	fake.withMaxConversationHistoryReturns = struct {
		result1 server.AgentBuilder
	}{result1}
}

func (fake *FakeAgentBuilder) WithMaxConversationHistoryReturnsOnCall(i int, result1 server.AgentBuilder) {
	fake.withMaxConversationHistoryMutex.Lock()
	defer fake.withMaxConversationHistoryMutex.Unlock()
	fake.WithMaxConversationHistoryStub = nil
	if fake.withMaxConversationHistoryReturnsOnCall == nil {
		fake.withMaxConversationHistoryReturnsOnCall = make(map[int]struct {
			result1 server.AgentBuilder
		})
	}
	fake.withMaxConversationHistoryReturnsOnCall[i] = struct {
		result1 server.AgentBuilder
	}{result1}
}

func (fake *FakeAgentBuilder) WithSystemPrompt(arg1 string) server.AgentBuilder {
	fake.withSystemPromptMutex.Lock()
	ret, specificReturn := fake.withSystemPromptReturnsOnCall[len(fake.withSystemPromptArgsForCall)]
	fake.withSystemPromptArgsForCall = append(fake.withSystemPromptArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.WithSystemPromptStub
	fakeReturns := fake.withSystemPromptReturns
	fake.recordInvocation("WithSystemPrompt", []interface{}{arg1})
	fake.withSystemPromptMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeAgentBuilder) WithSystemPromptCallCount() int {
	fake.withSystemPromptMutex.RLock()
	defer fake.withSystemPromptMutex.RUnlock()
	return len(fake.withSystemPromptArgsForCall)
}

func (fake *FakeAgentBuilder) WithSystemPromptCalls(stub func(string) server.AgentBuilder) {
	fake.withSystemPromptMutex.Lock()
	defer fake.withSystemPromptMutex.Unlock()
	fake.WithSystemPromptStub = stub
}

func (fake *FakeAgentBuilder) WithSystemPromptArgsForCall(i int) string {
	fake.withSystemPromptMutex.RLock()
	defer fake.withSystemPromptMutex.RUnlock()
	argsForCall := fake.withSystemPromptArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeAgentBuilder) WithSystemPromptReturns(result1 server.AgentBuilder) {
	fake.withSystemPromptMutex.Lock()
	defer fake.withSystemPromptMutex.Unlock()
	fake.WithSystemPromptStub = nil
	fake.withSystemPromptReturns = struct {
		result1 server.AgentBuilder
	}{result1}
}

func (fake *FakeAgentBuilder) WithSystemPromptReturnsOnCall(i int, result1 server.AgentBuilder) {
	fake.withSystemPromptMutex.Lock()
	defer fake.withSystemPromptMutex.Unlock()
	fake.WithSystemPromptStub = nil
	if fake.withSystemPromptReturnsOnCall == nil {
		fake.withSystemPromptReturnsOnCall = make(map[int]struct {
			result1 server.AgentBuilder
		})
	}
	fake.withSystemPromptReturnsOnCall[i] = struct {
		result1 server.AgentBuilder
	}{result1}
}

func (fake *FakeAgentBuilder) WithToolBox(arg1 server.ToolBox) server.AgentBuilder {
	fake.withToolBoxMutex.Lock()
	ret, specificReturn := fake.withToolBoxReturnsOnCall[len(fake.withToolBoxArgsForCall)]
	fake.withToolBoxArgsForCall = append(fake.withToolBoxArgsForCall, struct {
		arg1 server.ToolBox
	}{arg1})
	stub := fake.WithToolBoxStub
	fakeReturns := fake.withToolBoxReturns
	fake.recordInvocation("WithToolBox", []interface{}{arg1})
	fake.withToolBoxMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeAgentBuilder) WithToolBoxCallCount() int {
	fake.withToolBoxMutex.RLock()
	defer fake.withToolBoxMutex.RUnlock()
	return len(fake.withToolBoxArgsForCall)
}

func (fake *FakeAgentBuilder) WithToolBoxCalls(stub func(server.ToolBox) server.AgentBuilder) {
	fake.withToolBoxMutex.Lock()
	defer fake.withToolBoxMutex.Unlock()
	fake.WithToolBoxStub = stub
}

func (fake *FakeAgentBuilder) WithToolBoxArgsForCall(i int) server.ToolBox {
	fake.withToolBoxMutex.RLock()
	defer fake.withToolBoxMutex.RUnlock()
	argsForCall := fake.withToolBoxArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeAgentBuilder) WithToolBoxReturns(result1 server.AgentBuilder) {
	fake.withToolBoxMutex.Lock()
	defer fake.withToolBoxMutex.Unlock()
	fake.WithToolBoxStub = nil
	fake.withToolBoxReturns = struct {
		result1 server.AgentBuilder
	}{result1}
}

func (fake *FakeAgentBuilder) WithToolBoxReturnsOnCall(i int, result1 server.AgentBuilder) {
	fake.withToolBoxMutex.Lock()
	defer fake.withToolBoxMutex.Unlock()
	fake.WithToolBoxStub = nil
	if fake.withToolBoxReturnsOnCall == nil {
		fake.withToolBoxReturnsOnCall = make(map[int]struct {
			result1 server.AgentBuilder
		})
	}
	fake.withToolBoxReturnsOnCall[i] = struct {
		result1 server.AgentBuilder
	}{result1}
}

func (fake *FakeAgentBuilder) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.buildMutex.RLock()
	defer fake.buildMutex.RUnlock()
	fake.getConfigMutex.RLock()
	defer fake.getConfigMutex.RUnlock()
	fake.withAfterAgentCallbackMutex.RLock()
	defer fake.withAfterAgentCallbackMutex.RUnlock()
	fake.withAfterModelCallbackMutex.RLock()
	defer fake.withAfterModelCallbackMutex.RUnlock()
	fake.withAfterToolCallbackMutex.RLock()
	defer fake.withAfterToolCallbackMutex.RUnlock()
	fake.withBeforeAgentCallbackMutex.RLock()
	defer fake.withBeforeAgentCallbackMutex.RUnlock()
	fake.withBeforeModelCallbackMutex.RLock()
	defer fake.withBeforeModelCallbackMutex.RUnlock()
	fake.withBeforeToolCallbackMutex.RLock()
	defer fake.withBeforeToolCallbackMutex.RUnlock()
	fake.withCallbacksMutex.RLock()
	defer fake.withCallbacksMutex.RUnlock()
	fake.withConfigMutex.RLock()
	defer fake.withConfigMutex.RUnlock()
	fake.withLLMClientMutex.RLock()
	defer fake.withLLMClientMutex.RUnlock()
	fake.withMaxChatCompletionMutex.RLock()
	defer fake.withMaxChatCompletionMutex.RUnlock()
	fake.withMaxConversationHistoryMutex.RLock()
	defer fake.withMaxConversationHistoryMutex.RUnlock()
	fake.withSystemPromptMutex.RLock()
	defer fake.withSystemPromptMutex.RUnlock()
	fake.withToolBoxMutex.RLock()
	defer fake.withToolBoxMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAgentBuilder) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ server.AgentBuilder = new(FakeAgentBuilder)
